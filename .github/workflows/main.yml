name: FLUTTER_MASTER
on:
  push:
    branches: [github-actions]

jobs:
  flutter_master_deploy:
    runs-on: macos-latest

    env:
      GOOGLE_APPLICATION_CREDENTIALS: google-application-credentials.json

    steps:
      #<----------------  CACHE STRATEGY ----------------------->
      - name: CACHE STRATEGY
        id: cache-primes
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            **/Users/runner/

          key: "${{ runner.tool_cache }}-flutter-${{runner.arch}}"

      #<---------------- END CACHE STRATEGY ------------------->
      #<----------------     INIT CONFIG    ------------------->
      - name: COPY .
        uses: actions/checkout@v4

      - name: INSTALL JAVA 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: APPLE CERTIFICATES
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: FIREBASE CONF
        run: npm install -g firebase-tools
      #<----------------  END INIT CONFIG---------------------->

      #<----------------  FLUTTER CONFIG ---------------------->
      - name: FLUTTER INSTALL
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.19.0"
          channel: "stable"
          cache: true

      #<---------------- END FLUTTER CONFIG -------------------->

      #<----------------------  GUARDS ------------------------>
      - name: FLUTTER ANALYZE
        run: flutter analyze

      - name: FLUTTER TEST
        run: flutter test
      #<-------------------- END  GUARDS ---------------------->

      #<---------------- FLUTTER RELEASES --------------------->

      - name: GENERATE APK
        run: flutter build apk --release

      - name: GENERATE IPA
        run: flutter build ipa --release --export-options-plist=ios/Runner/ExportOptions.plist
      #<---------------- END FLUTTER RELEASES ----------------->
      #<----------------      DELIVERY   ---------------------->
      - name: GOOGLE CREDENTIALS
        shell: bash
        run: |
          echo "${{ secrets.JSON_APP_DISTRIBUTION_ACCESS }}" | base64 --decode > "google-application-credentials.json"

      - name: UPLOAD ANDROID TO APP DISTRIBUTION
        run: firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk --app 1:248510843816:android:b7c4948af306b7f4eeab9d --groups "testers"

      - name: UPLOAD IOS TO APP DISTRIBUTION
        run: firebase appdistribution:distribute build/ios/ipa/Apps/clean_architecture.ipa --app 1:248510843816:ios:a002a54c3ae86659eeab9d --groups "testers"

      #<----------------    ARTIFACS    ---------------------->
      - name: UPLOAD ARTIFAC
        uses: actions/upload-artifact@v4
        with:
          name: artifacs
          path: |
            build/ios/ipa/Apps/clean_architecture.ipa
            build/app/outputs/flutter-apk/app-release.apk
      #<----------------  END ARTIFACS    -------------------->
      - name: CLEAN KEYCHAIN
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
